package com.example.JFrame;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import org.json.*;

/**
 *
 * @author ignacioampurdanes
 */
public class BibliotecaJFrame extends javax.swing.JFrame {

    // URL base para las APIs
    private static final String BASE_URL_LIBROS = "http://localhost:8080/libros";
    private static final String BASE_URL_PRESTAMOS = "http://localhost:8080/prestamos";

    // Variables declaration - do not modify                     
    private JTabbedPane tabbedPane;
    private JPanel librosPanel, prestamosPanel;

    // Componentes para la pestaña de libros
    private JTable librosTable;
    private DefaultTableModel librosTableModel;
    private JTextField idLibroField, tituloField, autorField, isbnField, anioField, generoField, copiasField;
    private JButton refreshLibrosButton, buscarLibroButton, agregarLibroButton,
            actualizarLibroButton, eliminarLibroButton, limpiarLibroButton;
    private JComboBox<String> busquedaComboBox;
    private JTextField busquedaField;

    // Componentes para la pestaña de préstamos
    private JTable prestamosTable;
    private DefaultTableModel prestamosTableModel;
    private JTextField idPrestamoField, libroPrestamoField, usuarioField;
    private JButton verPrestamosButton, verActivosButton, verAtrasadosButton,
            prestarButton, devolverButton, buscarPrestamosUsuarioButton;
    private JPanel mainPanel;
    // End of variables declaration                   

    /**
     * Creates new form BibliotecaJFrame
     */
    public BibliotecaJFrame() {
        initComponents();

        // Configuración adicional después de initComponents()
        setupCustomComponents();
        setupCustomLayout();
        setupListeners();

        // Configuración adicional de la ventana
        setTitle("Sistema de Gestión de Biblioteca");
        setSize(1024, 768);
        setLocationRelativeTo(null);

        // Cargar datos iniciales
        cargarLibros();
        cargarPrestamos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * /**
     * Inicializa los componentes personalizados de la aplicación
     */
    private void setupCustomComponents() {
        // Crear el panel con pestañas
        tabbedPane = new JTabbedPane();

        // Inicializar paneles para cada pestaña
        librosPanel = new JPanel(new BorderLayout(10, 10));
        prestamosPanel = new JPanel(new BorderLayout(10, 10));

        // Configurar tabla de libros
        String[] librosColumns = {"ID", "Título", "Autor", "ISBN", "Año", "Género", "Copias"};
        librosTableModel = new DefaultTableModel(librosColumns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        librosTable = new JTable(librosTableModel);
        librosTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Campos para gestión de libros
        idLibroField = new JTextField(5);
        idLibroField.setEditable(false);
        tituloField = new JTextField(20);
        autorField = new JTextField(20);
        isbnField = new JTextField(15);
        anioField = new JTextField(5);
        generoField = new JTextField(15);
        copiasField = new JTextField(3);

        // Botones para gestión de libros
        refreshLibrosButton = new JButton("Refrescar");
        buscarLibroButton = new JButton("Buscar");
        agregarLibroButton = new JButton("Agregar");
        actualizarLibroButton = new JButton("Actualizar");
        eliminarLibroButton = new JButton("Eliminar");
        limpiarLibroButton = new JButton("Limpiar");

        // ComboBox para tipos de búsqueda
        busquedaComboBox = new JComboBox<>(new String[]{"Título", "Autor", "Género", "Disponibles"});
        busquedaField = new JTextField(20);

        // Configurar tabla de préstamos
        String[] prestamosColumns = {"ID", "Libro", "Usuario", "Fecha Préstamo", "Fecha Devolución", "Devuelto"};
        prestamosTableModel = new DefaultTableModel(prestamosColumns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        prestamosTable = new JTable(prestamosTableModel);
        prestamosTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Campos para gestión de préstamos
        idPrestamoField = new JTextField(5);
        idPrestamoField.setEditable(false);
        libroPrestamoField = new JTextField(5);
        usuarioField = new JTextField(20);

        // Botones para gestión de préstamos
        verPrestamosButton = new JButton("Ver Todos");
        verActivosButton = new JButton("Ver Activos");
        verAtrasadosButton = new JButton("Ver Atrasados");
        prestarButton = new JButton("Prestar Libro");
        devolverButton = new JButton("Devolver Libro");
        buscarPrestamosUsuarioButton = new JButton("Buscar por Usuario");
    }

    /**
     * Configura el layout de los componentes
     */
    private void setupCustomLayout() {
        // Limpiar el layout creado por el generador
        getContentPane().removeAll();

        // Panel principal con un margen
        mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Configurar panel de libros
        JPanel librosFormPanel = new JPanel(new GridBagLayout());
        librosFormPanel.setBorder(BorderFactory.createTitledBorder("Detalles del Libro"));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Campos de entrada para libros
        gbc.gridx = 0;
        gbc.gridy = 0;
        librosFormPanel.add(new JLabel("ID:"), gbc);
        gbc.gridx = 1;
        librosFormPanel.add(idLibroField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        librosFormPanel.add(new JLabel("Título:"), gbc);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        librosFormPanel.add(tituloField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.NONE;
        librosFormPanel.add(new JLabel("Autor:"), gbc);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        librosFormPanel.add(autorField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.NONE;
        librosFormPanel.add(new JLabel("ISBN:"), gbc);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        librosFormPanel.add(isbnField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.NONE;
        librosFormPanel.add(new JLabel("Año:"), gbc);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        librosFormPanel.add(anioField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.NONE;
        librosFormPanel.add(new JLabel("Género:"), gbc);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        librosFormPanel.add(generoField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.NONE;
        librosFormPanel.add(new JLabel("Copias:"), gbc);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        librosFormPanel.add(copiasField, gbc);

        // Panel para búsqueda de libros
        JPanel librosBusquedaPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        librosBusquedaPanel.add(new JLabel("Buscar por:"));
        librosBusquedaPanel.add(busquedaComboBox);
        librosBusquedaPanel.add(busquedaField);
        librosBusquedaPanel.add(buscarLibroButton);

        // Panel para botones de libros
        JPanel librosButtonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        librosButtonPanel.add(refreshLibrosButton);
        librosButtonPanel.add(agregarLibroButton);
        librosButtonPanel.add(actualizarLibroButton);
        librosButtonPanel.add(eliminarLibroButton);
        librosButtonPanel.add(limpiarLibroButton);

        // Panel norte para libros (combinando formulario y búsqueda)
        JPanel librosNortePanel = new JPanel(new BorderLayout());
        librosNortePanel.add(librosFormPanel, BorderLayout.CENTER);
        librosNortePanel.add(librosBusquedaPanel, BorderLayout.SOUTH);

        // Completar panel de libros
        librosPanel.add(librosNortePanel, BorderLayout.NORTH);
        librosPanel.add(new JScrollPane(librosTable), BorderLayout.CENTER);
        librosPanel.add(librosButtonPanel, BorderLayout.SOUTH);

        // Configurar panel de préstamos
        JPanel prestamosFormPanel = new JPanel(new GridBagLayout());
        prestamosFormPanel.setBorder(BorderFactory.createTitledBorder("Detalles del Préstamo"));

        gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Campos de entrada para préstamos
        gbc.gridx = 0;
        gbc.gridy = 0;
        prestamosFormPanel.add(new JLabel("ID Préstamo:"), gbc);
        gbc.gridx = 1;
        prestamosFormPanel.add(idPrestamoField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        prestamosFormPanel.add(new JLabel("ID Libro:"), gbc);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        prestamosFormPanel.add(libroPrestamoField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.NONE;
        prestamosFormPanel.add(new JLabel("Usuario:"), gbc);
        gbc.gridx = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        prestamosFormPanel.add(usuarioField, gbc);

        // Panel para botones de préstamos
        JPanel prestamosButtonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        prestamosButtonPanel.add(verPrestamosButton);
        prestamosButtonPanel.add(verActivosButton);
        prestamosButtonPanel.add(verAtrasadosButton);
        prestamosButtonPanel.add(buscarPrestamosUsuarioButton);
        prestamosButtonPanel.add(prestarButton);
        prestamosButtonPanel.add(devolverButton);

        // Completar panel de préstamos
        prestamosPanel.add(prestamosFormPanel, BorderLayout.NORTH);
        prestamosPanel.add(new JScrollPane(prestamosTable), BorderLayout.CENTER);
        prestamosPanel.add(prestamosButtonPanel, BorderLayout.SOUTH);

        // Añadir pestañas al panel
        tabbedPane.addTab("Libros", librosPanel);
        tabbedPane.addTab("Préstamos", prestamosPanel);

        // Añadir todo al panel principal
        mainPanel.add(tabbedPane, BorderLayout.CENTER);

        // Agregar el panel principal al JFrame
        setContentPane(mainPanel);
    }

    /**
     * Configura los listeners para los eventos
     */
    private void setupListeners() {
        // Listeners para selección en tablas
        librosTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && librosTable.getSelectedRow() != -1) {
                int row = librosTable.getSelectedRow();

                idLibroField.setText(librosTable.getValueAt(row, 0).toString());
                tituloField.setText(librosTable.getValueAt(row, 1).toString());
                autorField.setText(librosTable.getValueAt(row, 2).toString());
                isbnField.setText(librosTable.getValueAt(row, 3).toString());
                anioField.setText(librosTable.getValueAt(row, 4).toString());
                generoField.setText(librosTable.getValueAt(row, 5).toString());
                copiasField.setText(librosTable.getValueAt(row, 6).toString());
            }
        });

        prestamosTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting() && prestamosTable.getSelectedRow() != -1) {
                int row = prestamosTable.getSelectedRow();
                idPrestamoField.setText(prestamosTable.getValueAt(row, 0).toString());
            }
        });

        // Listeners para botones de libros
        refreshLibrosButton.addActionListener(e -> cargarLibros());

        buscarLibroButton.addActionListener(e -> {
            String tipoBusqueda = (String) busquedaComboBox.getSelectedItem();
            String valorBusqueda = busquedaField.getText().trim();

            try {
                switch (tipoBusqueda) {
                    case "Título":
                        buscarLibrosPorTitulo(valorBusqueda);
                        break;
                    case "Autor":
                        buscarLibrosPorAutor(valorBusqueda);
                        break;
                    case "Género":
                        buscarLibrosPorGenero(valorBusqueda);
                        break;
                    case "Disponibles":
                        buscarLibrosDisponibles();
                        break;
                }
            } catch (Exception ex) {
                mostrarError("Error en la búsqueda: " + ex.getMessage());
            }
        });

        agregarLibroButton.addActionListener(e -> {
            if (validarFormLibro(false)) {
                try {
                    agregarLibro();
                    limpiarFormLibro();
                    cargarLibros();
                } catch (Exception ex) {
                    mostrarError("Error al agregar libro: " + ex.getMessage());
                }
            }
        });

        actualizarLibroButton.addActionListener(e -> {
            if (validarFormLibro(true)) {
                try {
                    actualizarLibro();
                    limpiarFormLibro();
                    cargarLibros();
                } catch (Exception ex) {
                    mostrarError("Error al actualizar libro: " + ex.getMessage());
                }
            }
        });

        eliminarLibroButton.addActionListener(e -> {
            if (idLibroField.getText().isEmpty()) {
                mostrarError("Seleccione un libro para eliminar");
                return;
            }

            int opcion = JOptionPane.showConfirmDialog(
                    this,
                    "¿Está seguro de que desea eliminar este libro?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION
            );

            if (opcion == JOptionPane.YES_OPTION) {
                try {
                    eliminarLibro();
                    limpiarFormLibro();
                    cargarLibros();
                } catch (Exception ex) {
                    mostrarError("Error al eliminar libro: " + ex.getMessage());
                }
            }
        });

        limpiarLibroButton.addActionListener(e -> limpiarFormLibro());

        // Listeners para botones de préstamos
        verPrestamosButton.addActionListener(e -> cargarPrestamos());

        verActivosButton.addActionListener(e -> {
            try {
                cargarPrestamosActivos();
            } catch (Exception ex) {
                mostrarError("Error al cargar préstamos activos: " + ex.getMessage());
            }
        });

        verAtrasadosButton.addActionListener(e -> {
            try {
                cargarPrestamosAtrasados();
            } catch (Exception ex) {
                mostrarError("Error al cargar préstamos atrasados: " + ex.getMessage());
            }
        });

        buscarPrestamosUsuarioButton.addActionListener(e -> {
            String usuario = usuarioField.getText().trim();
            if (usuario.isEmpty()) {
                mostrarError("Ingrese un nombre de usuario para buscar");
                return;
            }

            try {
                cargarPrestamosPorUsuario(usuario);
            } catch (Exception ex) {
                mostrarError("Error al buscar préstamos del usuario: " + ex.getMessage());
            }
        });

        prestarButton.addActionListener(e -> {
            if (libroPrestamoField.getText().isEmpty() || usuarioField.getText().isEmpty()) {
                mostrarError("Ingrese ID del libro y nombre de usuario");
                return;
            }

            try {
                prestarLibro();
                limpiarFormPrestamo();
                cargarPrestamos();
                cargarLibros();
            } catch (Exception ex) {
                mostrarError("Error al prestar libro: " + ex.getMessage());
            }
        });

        devolverButton.addActionListener(e -> {
            if (idPrestamoField.getText().isEmpty()) {
                mostrarError("Seleccione un préstamo para devolver");
                return;
            }

            try {
                devolverLibro();
                limpiarFormPrestamo();
                cargarPrestamos();
                cargarLibros();
            } catch (Exception ex) {
                mostrarError("Error al devolver libro: " + ex.getMessage());
            }
        });
    }

    /**
     * Carga todos los libros desde el servidor
     */
    private void cargarLibros() {
        try {
            String response = sendRequest(BASE_URL_LIBROS, "GET", null);
            librosTableModel.setRowCount(0);

            JSONArray jsonArray = new JSONArray(response);
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject libro = jsonArray.getJSONObject(i);
                Object[] row = {
                    libro.getInt("id"),
                    libro.getString("titulo"),
                    libro.getString("autor"),
                    libro.getString("isbn"),
                    libro.getInt("anioPublicacion"),
                    libro.getString("genero"),
                    libro.getInt("copiasDisponibles")
                };
                librosTableModel.addRow(row);
            }
        } catch (Exception e) {
            mostrarError("Error al cargar libros: " + e.getMessage());
        }
    }

    /**
     * Busca libros por título
     */
    private void buscarLibrosPorTitulo(String titulo) throws Exception {
        String url = BASE_URL_LIBROS + "/buscar/titulo/" + URLEncoder.encode(titulo, "UTF-8");
        actualizarTablaLibros(url);
    }

    /**
     * Busca libros por autor
     */
    private void buscarLibrosPorAutor(String autor) throws Exception {
        String url = BASE_URL_LIBROS + "/buscar/autor/" + URLEncoder.encode(autor, "UTF-8");
        actualizarTablaLibros(url);
    }

    /**
     * Busca libros por género
     */
    private void buscarLibrosPorGenero(String genero) throws Exception {
        String url = BASE_URL_LIBROS + "/buscar/genero/" + URLEncoder.encode(genero, "UTF-8");
        actualizarTablaLibros(url);
    }

    /**
     * Muestra sólo los libros disponibles
     */
    private void buscarLibrosDisponibles() throws Exception {
        String url = BASE_URL_LIBROS + "/disponibles";
        actualizarTablaLibros(url);
    }

    /**
     * Actualiza la tabla de libros con los resultados de la URL
     */
    private void actualizarTablaLibros(String url) throws Exception {
        String response = sendRequest(url, "GET", null);
        librosTableModel.setRowCount(0);

        JSONArray jsonArray = new JSONArray(response);
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject libro = jsonArray.getJSONObject(i);
            Object[] row = {
                libro.getInt("id"),
                libro.getString("titulo"),
                libro.getString("autor"),
                libro.getString("isbn"),
                libro.getInt("anioPublicacion"),
                libro.getString("genero"),
                libro.getInt("copiasDisponibles")
            };
            librosTableModel.addRow(row);
        }
    }

    /**
     * Agrega un nuevo libro
     */
    private void agregarLibro() throws Exception {
        JSONObject libro = new JSONObject();
        libro.put("titulo", tituloField.getText().trim());
        libro.put("autor", autorField.getText().trim());
        libro.put("isbn", isbnField.getText().trim());
        libro.put("anioPublicacion", Integer.parseInt(anioField.getText().trim()));
        libro.put("genero", generoField.getText().trim());
        libro.put("copiasDisponibles", Integer.parseInt(copiasField.getText().trim()));

        sendRequest(BASE_URL_LIBROS, "POST", libro.toString());
        JOptionPane.showMessageDialog(this, "Libro agregado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Actualiza un libro existente
     */
    private void actualizarLibro() throws Exception {
        int id = Integer.parseInt(idLibroField.getText().trim());

        JSONObject libro = new JSONObject();
        libro.put("titulo", tituloField.getText().trim());
        libro.put("autor", autorField.getText().trim());
        libro.put("isbn", isbnField.getText().trim());
        libro.put("anioPublicacion", Integer.parseInt(anioField.getText().trim()));
        libro.put("genero", generoField.getText().trim());
        libro.put("copiasDisponibles", Integer.parseInt(copiasField.getText().trim()));

        sendRequest(BASE_URL_LIBROS + "/" + id, "PUT", libro.toString());
        JOptionPane.showMessageDialog(this, "Libro actualizado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Elimina un libro
     */
    private void eliminarLibro() throws Exception {
        int id = Integer.parseInt(idLibroField.getText().trim());
        sendRequest(BASE_URL_LIBROS + "/" + id, "DELETE", null);
        JOptionPane.showMessageDialog(this, "Libro eliminado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Valida el formulario de libro
     */
    private boolean validarFormLibro(boolean esActualizacion) {
        if (esActualizacion && idLibroField.getText().isEmpty()) {
            mostrarError("Seleccione un libro para actualizar");
            return false;
        }

        if (tituloField.getText().trim().isEmpty()) {
            mostrarError("El título no puede estar vacío");
            return false;
        }

        if (autorField.getText().trim().isEmpty()) {
            mostrarError("El autor no puede estar vacío");
            return false;
        }

        try {
            if (!anioField.getText().trim().isEmpty()) {
                int anio = Integer.parseInt(anioField.getText().trim());
                if (anio < 0 || anio > 2025) {
                    mostrarError("El año debe estar entre 0 y 2025");
                    return false;
                }
            }
        } catch (NumberFormatException e) {
            mostrarError("El año debe ser un número");
            return false;
        }

        try {
            int copias = Integer.parseInt(copiasField.getText().trim());
            if (copias < 0) {
                mostrarError("Las copias disponibles no pueden ser negativas");
                return false;
            }
        } catch (NumberFormatException e) {
            mostrarError("Las copias disponibles deben ser un número");
            return false;
        }

        return true;
    }

    /**
     * Limpia el formulario de libro
     */
    private void limpiarFormLibro() {
        idLibroField.setText("");
        tituloField.setText("");
        autorField.setText("");
        isbnField.setText("");
        anioField.setText("");
        generoField.setText("");
        copiasField.setText("");
        librosTable.clearSelection();
    }

    /**
     * Carga todos los préstamos
     */
    private void cargarPrestamos() {
        try {
            // Agrega un parámetro de tiempo para evitar caché
            String url = BASE_URL_PRESTAMOS + "?timestamp=" + System.currentTimeMillis();
            String response = sendRequest(url, "GET", null);
            actualizarTablaPrestamos(response);
        } catch (Exception e) {
            mostrarError("Error al cargar préstamos: " + e.getMessage());
        }
    }

    /**
     * Carga sólo los préstamos activos
     */
    private void cargarPrestamosActivos() throws Exception {
        String response = sendRequest(BASE_URL_PRESTAMOS + "/activos", "GET", null);
        actualizarTablaPrestamos(response);
    }

    /**
     * Carga préstamos atrasados
     */
    private void cargarPrestamosAtrasados() throws Exception {
        String response = sendRequest(BASE_URL_PRESTAMOS + "/atrasados", "GET", null);
        actualizarTablaPrestamos(response);
    }

    /**
     * Carga préstamos por usuario
     */
    private void cargarPrestamosPorUsuario(String usuario) throws Exception {
        String url = BASE_URL_PRESTAMOS + "/usuario/" + URLEncoder.encode(usuario, "UTF-8");
        String response = sendRequest(url, "GET", null);
        actualizarTablaPrestamos(response);
    }

    /**
     * Actualiza la tabla de préstamos
     */
    private void actualizarTablaPrestamos(String jsonResponse) {
        prestamosTableModel.setRowCount(0);

        try {
            System.out.println("JSON recibido: " + jsonResponse); // Para depuración

            JSONArray jsonArray = new JSONArray(jsonResponse);
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject prestamo = jsonArray.getJSONObject(i);
                JSONObject libro = prestamo.getJSONObject("libro");

                // Depuración detallada
                boolean devuelto = prestamo.getBoolean("devuelto");
                System.out.println("Préstamo ID: " + prestamo.getInt("id")
                        + ", Devuelto JSON: " + devuelto);

                Object[] row = {
                    prestamo.getInt("id"),
                    libro.getString("titulo"),
                    prestamo.getString("nombreUsuario"),
                    prestamo.getString("fechaPrestamo"),
                    prestamo.has("fechaDevolucionEsperada") ? prestamo.getString("fechaDevolucionEsperada") : "",
                    prestamo.getBoolean("devuelto") ? "Sí" : "No" // Esta línea es crucial
                };
                prestamosTableModel.addRow(row);
            }
        } catch (Exception e) {
            System.err.println("Error al procesar JSON: " + e.getMessage());
            e.printStackTrace();
            mostrarError("Error al procesar datos: " + e.getMessage());
        }
    }

    /**
     * Realiza un préstamo de libro
     */
    private void prestarLibro() throws Exception {
        int libroId = Integer.parseInt(libroPrestamoField.getText().trim());
        String usuario = usuarioField.getText().trim();

        JSONObject prestamoRequest = new JSONObject();
        prestamoRequest.put("libroId", libroId);
        prestamoRequest.put("nombreUsuario", usuario);

        sendRequest(BASE_URL_PRESTAMOS, "POST", prestamoRequest.toString());
        JOptionPane.showMessageDialog(this, "Préstamo realizado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Devuelve un libro prestado
     */
    private void devolverLibro() throws Exception {
        int prestamoId = Integer.parseInt(idPrestamoField.getText().trim());
        String response = sendRequest(BASE_URL_PRESTAMOS + "/devolver/" + prestamoId, "PUT", "");

        // Imprimir respuesta para depuración
        System.out.println("Respuesta al devolver libro: " + response);

        // Actualizar la UI manualmente para este préstamo
        for (int i = 0; i < prestamosTableModel.getRowCount(); i++) {
            if ((int) prestamosTableModel.getValueAt(i, 0) == prestamoId) {
                prestamosTableModel.setValueAt("Sí", i, 5); // Columna "Devuelto"
                break;
            }
        }

        JOptionPane.showMessageDialog(this, "Libro devuelto correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Recargar todos los préstamos para actualizar la vista
        cargarPrestamos();
    }

    /**
     * Limpia el formulario de préstamo
     */
    private void limpiarFormPrestamo() {
        idPrestamoField.setText("");
        libroPrestamoField.setText("");
        usuarioField.setText("");
        prestamosTable.clearSelection();
    }

    /**
     * Envía una solicitud HTTP
     */
    private String sendRequest(String urlStr, String method, String jsonBody) throws Exception {
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(method);

        if (jsonBody != null) {
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/json");
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = jsonBody.getBytes("utf-8");
                os.write(input, 0, input.length);
            }
        }

        int responseCode = conn.getResponseCode();

        if (responseCode >= 200 && responseCode < 300) {
            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }
                return response.toString();
            }
        } else {
            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getErrorStream(), "utf-8"))) {
                StringBuilder error = new StringBuilder();
                String errorLine;
                while ((errorLine = br.readLine()) != null) {
                    error.append(errorLine.trim());
                }
                throw new Exception("HTTP error code: " + responseCode + ", message: " + error.toString());
            }
        }
    }

    /**
     * Muestra un mensaje de error
     */
    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BibliotecaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BibliotecaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BibliotecaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BibliotecaJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BibliotecaJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
